{"version":3,"sources":["logo.svg","Components/Addform.js","Components/Task.js","Components/Tasks.js","Components/Home.js","Components/About.js","Components/Contact.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Addform","addRecord","bind","e","preventDefault","fetch","method","headers","body","JSON","stringify","Math","floor","random","target","task","value","status","then","res","json","result","props","addRec","catch","err","console","log","onSubmit","this","className","type","name","id","placeholder","Component","Task","delRecord","editRecord","updateRecord","state","isEdit","getAttribute","tasks","onDel","setState","title","isCompleted","onUpdate","defaultValue","key","onClick","datakey","Tasks","getRecord","map","src","logo","alt","Home","About","Contact","Navbar","class","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0107a043.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Addform extends Component{\r\n    constructor(){\r\n        super();\r\n        this.addRecord = this.addRecord.bind(this);\r\n    }\r\n    addRecord(e){\r\n        e.preventDefault();\r\n        fetch('http://localhost:3001/tasks', {\r\n            method: \"POST\",\r\n            headers:{\r\n                'Content-Type': 'Application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                \"id\": Math.floor((Math.random() + 1) * 0x100000),\r\n                \"title\": e.target.task.value,\r\n                \"isCompleted\": e.target.status.value \r\n            })\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => this.props.addRec(result))\r\n        .catch(err => console.log(err));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form onSubmit={this.addRecord} className=\"mt5\">\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" name=\"task\" id=\"task\" placeholder=\"Add New Task Here....\" className=\"form-control\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <input type=\"text\" name=\"status\" id=\"status\" placeholder=\"Status Checked\" className=\"form-control\" />\r\n                </div>  \r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" value=\"Add task\" className=\"btn btn-primary btn-block\" />   \r\n                </div>\r\n                \r\n\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Addform;","import React, { Component, Fragment } from 'react';\r\n\r\n\r\nclass Task extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.delRecord = this.delRecord.bind(this);\r\n        this.editRecord = this.editRecord.bind(this);\r\n        this.updateRecord = this.updateRecord.bind(this);\r\n        this.state = {\r\n            isEdit: false\r\n        }\r\n    }\r\n\r\n    delRecord(e){\r\n        const id = e.target.getAttribute('datakey');\r\n        fetch('http://localhost:3001/tasks/'+id, {\r\n          method: \"DELETE\",\r\n          headers:{\r\n            'Content-Type': 'Application/json'\r\n          }\r\n        }).then(() => {\r\n           fetch('http://localhost:3001/tasks')\r\n          .then(res => res.json())\r\n          .then(tasks =>  this.props.onDel(tasks))\r\n          .catch(err => console.log(err));\r\n        }).catch(err => console.log(err));\r\n        \r\n    }\r\n    editRecord(){\r\n      this.setState({isEdit: true});\r\n    }\r\n    updateRecord(e){\r\n      e.preventDefault();\r\n      const id = e.target.id.value;\r\n      //console.log(e.target.id.value);\r\n      fetch('http://localhost:3001/tasks/'+id, {\r\n        method: \"PUT\",\r\n        headers:{\r\n          'Content-Type': 'application/json'\r\n        },\r\n\r\n        body:JSON.stringify({\r\n          title:e.target.task.value,\r\n          isCompleted:e.target.status.value\r\n        })\r\n\r\n        }).then(res => res.json())\r\n          .then(task => { \r\n            this.props.onUpdate(task)\r\n            this.setState({isEdit: false}) \r\n          \r\n          })\r\n          .catch(err => console.log(err))\r\n      \r\n    }\r\n    render(){\r\n        const {id, title, isCompleted} = this.props;\r\n        const task = (this.state.isEdit === true) \r\n        ? \r\n        <form onSubmit={this.updateRecord} className=\"mt5\">\r\n             <input type=\"hidden\" name=\"id\" id=\"id\"  defaultValue={id} />\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" name=\"task\" id=\"task\" defaultValue={title} className=\"form-control\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                <input type=\"text\" name=\"status\" id=\"status\" defaultValue={isCompleted} className=\"form-control\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"submit\" value=\"Update task\" className=\"btn btn-primary btn-block\" />   \r\n                </div>\r\n                \r\n\r\n            </form>\r\n             : \r\n        <li className=\"list-group-item\" key={id}>{title} - {isCompleted} - \r\n        <button className=\"btn-sm btn-info\" onClick={this.editRecord} datakey={id}>Edit</button> - <button className=\"btn-sm btn-danger\" onClick={this.delRecord} datakey={id}>Delete</button></li> \r\n        return (\r\n          <Fragment>\r\n                {task}\r\n          </Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Task;","import React, { Component } from 'react';\r\nimport logo from '../logo.svg';\r\nimport '../App.css';\r\nimport Addform from './Addform';\r\nimport Task from './Task';\r\n\r\nclass Tasks extends Component {\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      tasks:[]\r\n    }\r\n    this.addRecord = this.addRecord.bind(this);\r\n    this.delRecord = this.delRecord.bind(this);\r\n    this.getRecord = this.getRecord.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch('http://localhost:3001/tasks')\r\n    .then(res => res.json())\r\n    .then(tasks =>  this.setState({tasks}))\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  getRecord(e){\r\n    const tasks = this.state.tasks.map(task => {\r\n      if(e.id == task.id){\r\n        return e\r\n      }\r\n      return task;\r\n    })\r\n    this.setState({tasks});\r\n  }\r\n\r\n  addRecord(e){\r\n    const tasks = [...this.state.tasks, e];\r\n   this.setState({tasks})\r\n  }\r\n\r\n  delRecord(e){\r\n   this.setState({tasks: e})\r\n  }\r\n\r\n  render(){\r\n  const tasks = this.state.tasks.map(task => <Task key={task.id} {...task} onDel={this.delRecord} onUpdate={this.getRecord} />)\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      <h3>Welcome To React Todo App</h3>\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        \r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n         <div className=\"col-md-6 offset-md-3\">\r\n          <Addform addRec={this.addRecord} />\r\n         <ul className=\"list-group\">\r\n              <li className=\"list-group-item active\">Todo Task List</li>\r\n              {tasks}\r\n            </ul>\r\n           </div> \r\n          </div>\r\n        </div> \r\n        \r\n\r\n        \r\n      </header>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\nexport default Tasks;\r\n","import React, {Component} from 'react';\r\n\r\n\r\nclass Home extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n        <div className=\"container\">\r\n                <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n            <h1 className=\"text-center\">Welcom To Home Page</h1>\r\n            </div>\r\n            </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\n\r\n\r\nclass About extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return( <div className=\"container\"> <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n             \r\n             <h1 className=\"text-center\">Welcome To About Us</h1>\r\n\r\n             </div>\r\n             </div>\r\n             </div>\r\n            \r\n            );\r\n    }\r\n}\r\n\r\nexport default About;","import React, {Component} from 'react';\r\n\r\n\r\nclass Contact extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(<div className=\"container\"> <div className=\"row\">\r\n        <div className=\"col-md-12\">\r\n            \r\n            <h1 className=\"text-center\">Welcome to Contact Us</h1>\r\n            </div>\r\n            </div>\r\n\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default Contact;","import React, {Component, Fragment} from 'react';\r\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom';\r\nimport Tasks from './Tasks';\r\nimport Home from './Home';\r\nimport About from './About';\r\nimport Contact from './Contact';\r\n\r\n\r\nclass Navbar extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        return(\r\n            <Router>\r\n            <Fragment>\r\n            <nav class=\"navbar navbar-expand-lg navbar-dark  bg-dark\">\r\n            <Link class=\"navbar-brand\" to=\"#\">Navbar</Link>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n              <div class=\"navbar-nav\">\r\n                <Link class=\"nav-item nav-link\" to=\"/\">Home <span class=\"sr-only\">(current)</span></Link>\r\n                <Link class=\"nav-item nav-link\" to=\"/about\">About Us</Link>\r\n                <Link class=\"nav-item nav-link\" to=\"/tasks\">Tasks</Link>\r\n                <Link class=\"nav-item nav-link\" to=\"/contact\">Contact Us</Link>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n          <Route exact path=\"/\" component={Home}/>\r\n          <Route exact path=\"/about\" component={About}/>\r\n          <Route exact path=\"/tasks\" component={Tasks}/>\r\n          <Route exact path=\"/contact\" component={Contact}/>\r\n           </Fragment>\r\n          </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React, { Component, Fragment } from 'react';\nimport Tasks from './Components/Tasks'\nimport Navbar from './Components/Navbar'\n\nclass App extends Component {\n\n  \n\n  render(){\n \n  return (\n   \n      <Navbar />\n      \n    \n    \n  );\n}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}